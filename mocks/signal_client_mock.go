// Code generated by MockGen. DO NOT EDIT.
// Source: pb/signal_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	pb "grpc-mock-example/pb"
	reflect "reflect"
)

// MockSignalClient is a mock of SignalClient interface
type MockSignalClient struct {
	ctrl     *gomock.Controller
	recorder *MockSignalClientMockRecorder
}

// MockSignalClientMockRecorder is the mock recorder for MockSignalClient
type MockSignalClientMockRecorder struct {
	mock *MockSignalClient
}

// NewMockSignalClient creates a new mock instance
func NewMockSignalClient(ctrl *gomock.Controller) *MockSignalClient {
	mock := &MockSignalClient{ctrl: ctrl}
	mock.recorder = &MockSignalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSignalClient) EXPECT() *MockSignalClientMockRecorder {
	return m.recorder
}

// Ping mocks base method
func (m *MockSignalClient) Ping(ctx context.Context, in *pb.PingRequest, opts ...grpc.CallOption) (*pb.PingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*pb.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping
func (mr *MockSignalClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockSignalClient)(nil).Ping), varargs...)
}

// Echo mocks base method
func (m *MockSignalClient) Echo(ctx context.Context, in *pb.EchoRequest, opts ...grpc.CallOption) (*pb.EchoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Echo", varargs...)
	ret0, _ := ret[0].(*pb.EchoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Echo indicates an expected call of Echo
func (mr *MockSignalClientMockRecorder) Echo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockSignalClient)(nil).Echo), varargs...)
}

// MockSignalServer is a mock of SignalServer interface
type MockSignalServer struct {
	ctrl     *gomock.Controller
	recorder *MockSignalServerMockRecorder
}

// MockSignalServerMockRecorder is the mock recorder for MockSignalServer
type MockSignalServerMockRecorder struct {
	mock *MockSignalServer
}

// NewMockSignalServer creates a new mock instance
func NewMockSignalServer(ctrl *gomock.Controller) *MockSignalServer {
	mock := &MockSignalServer{ctrl: ctrl}
	mock.recorder = &MockSignalServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSignalServer) EXPECT() *MockSignalServerMockRecorder {
	return m.recorder
}

// Ping mocks base method
func (m *MockSignalServer) Ping(arg0 context.Context, arg1 *pb.PingRequest) (*pb.PingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*pb.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping
func (mr *MockSignalServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockSignalServer)(nil).Ping), arg0, arg1)
}

// Echo mocks base method
func (m *MockSignalServer) Echo(arg0 context.Context, arg1 *pb.EchoRequest) (*pb.EchoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Echo", arg0, arg1)
	ret0, _ := ret[0].(*pb.EchoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Echo indicates an expected call of Echo
func (mr *MockSignalServerMockRecorder) Echo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockSignalServer)(nil).Echo), arg0, arg1)
}

// mustEmbedUnimplementedSignalServer mocks base method
func (m *MockSignalServer) mustEmbedUnimplementedSignalServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSignalServer")
}

// mustEmbedUnimplementedSignalServer indicates an expected call of mustEmbedUnimplementedSignalServer
func (mr *MockSignalServerMockRecorder) mustEmbedUnimplementedSignalServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSignalServer", reflect.TypeOf((*MockSignalServer)(nil).mustEmbedUnimplementedSignalServer))
}

// MockUnsafeSignalServer is a mock of UnsafeSignalServer interface
type MockUnsafeSignalServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSignalServerMockRecorder
}

// MockUnsafeSignalServerMockRecorder is the mock recorder for MockUnsafeSignalServer
type MockUnsafeSignalServerMockRecorder struct {
	mock *MockUnsafeSignalServer
}

// NewMockUnsafeSignalServer creates a new mock instance
func NewMockUnsafeSignalServer(ctrl *gomock.Controller) *MockUnsafeSignalServer {
	mock := &MockUnsafeSignalServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSignalServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnsafeSignalServer) EXPECT() *MockUnsafeSignalServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSignalServer mocks base method
func (m *MockUnsafeSignalServer) mustEmbedUnimplementedSignalServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSignalServer")
}

// mustEmbedUnimplementedSignalServer indicates an expected call of mustEmbedUnimplementedSignalServer
func (mr *MockUnsafeSignalServerMockRecorder) mustEmbedUnimplementedSignalServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSignalServer", reflect.TypeOf((*MockUnsafeSignalServer)(nil).mustEmbedUnimplementedSignalServer))
}
